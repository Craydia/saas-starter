// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  type          String
  provider      String

  business    Business? @relation(fields: [businessId], references: [id])
  businessId  String?

  @@map(name: "users")
}

model Business {
  id        String    @id @default(cuid())
  name      String?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @default(now()) @map(name: "updated_at")
  users     User[]
  payments  Payment[]

  stripeConnectedAccountId String? @unique @map(name: "stripe_connect_account_id")
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId         String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  stripePaymentId       String?   @map(name: "stripe_payment_id")

  @@map(name: "businesses")
}

model Payment {
  id               String          @id @default(uuid())
  name             String
  price            Float
  description      String
  payload          Json
  images           String[]
  transactionTime  TransactionTime @map(name: "transaction_time")
  customDelayDays  Int            @map(name: "custom_delay_days")
  servicedAt       DateTime       @map(name: "serviced_at")

  link        String    @unique
  acceptedAt  DateTime
  payedAt     DateTime

  createdAt   DateTime  @default(now())
  invoice     Invoice?
  business    Business  @relation(fields: [businessId], references: [id])
  businessId  String

  @@map(name: "payments")
}

model Invoice {
  id        String        @id @default(uuid())
  xml       String
  status    InvoiceStatus
  
  createdAt   DateTime  @default(now())
  payment     Payment   @relation(fields: [paymentId], references: [id])
  paymentId   String    @unique

  @@map(name: "invoices")
}

enum InvoiceStatus {
  ready
  sent_to_sdi
  approved_by_sdi
  rejected_by_sdi
}

enum TransactionTime {
  now
  end_of_month
  start_of_next_month
  middle_of_next_month
  end_of_next_month
  end_of_second_next_month
}
